import tkinter as tk
from tkinter import messagebox
import matplotlib.pyplot as plt

def calculate_bmi():
    try:
        weight = float(weight_entry.get())
        height = float(height_entry.get()) / 100  # height to meter conversion
        bmi = weight / (height ** 2)
        
        bmi_label.config(text=f"BMI: {bmi:.2f}")
        
        if bmi < 18.5:
            bmi_label.config(fg="orange", text=f"BMI: {bmi:.2f} (Underweight)")
            quote = "Eat healthy, stay healthy and keep striving!"c
            quote_label.config(text=quote, fg="blue")
            category = "Underweight"
        elif 18.5 <= bmi < 24.9:
            bmi_label.config(fg="green", text=f"BMI: {bmi:.2f} (Normal weight)")
            quote = "Great work, keep going, keep maintaining your healthy lifestyle!"
            quote_label.config(text=quote, fg="blue")
            category = "Normal weight"
        else:
            bmi_label.config(fg="red", text=f"BMI: {bmi:.2f} (Overweight)")
            quote = "Focus on your goals to make healthier choices everyday!"
            quote_label.config(text=quote, fg="blue")
            category = "Overweight"
        
        update_graph(bmi, category, quote)
    except ValueError:
        messagebox.showerror("Error", "You entered wrong number for weight and height.")

def update_graph(bmi, category, quote):
    labels = ['Underweight', 'Normal weight', 'Overweight']
    colors = ['orange', 'green', 'red']
    sizes = [18.5, 24.9 - 18.5, 40 - 24.9]  
    
    fig, ax = plt.subplots()
    wedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, 
                                      startangle=90, counterclock=False, 
                                      autopct='%1.1f%%')

    
    for i, label in enumerate(labels):
        if label == category:
            wedges[i].set_alpha(1.0)  
        else:
            wedges[i].set_alpha(0.3)  
    
    plt.title(f"BMI: {bmi:.2f} ({category})")
    
    
    ax.annotate(f"BMI: {bmi:.2f}\n{quote}", xy=(0, 0), xytext=(0, -1.2),
                textcoords='axes fraction', ha='center', va='center')
    
    plt.show()

def reset_fields():
    weight_entry.delete(0, tk.END)
    height_entry.delete(0, tk.END)
    bmi_label.config(text="")
    quote_label.config(text="")

root = tk.Tk()
root.title("BMI Calculator")

tk.Label(root, text="Weight (kg):").grid(row=0, column=0, padx=5, pady=5)
weight_entry = tk.Entry(root)
weight_entry.grid(row=0, column=1, padx=5, pady=5)

tk.Label(root, text="Height (cm):").grid(row=1, column=0, padx=5, pady=5)
height_entry = tk.Entry(root)
height_entry.grid(row=1, column=1, padx=5, pady=5)

calculate_button = tk.Button(root, text="Calculate BMI", command=calculate_bmi)
calculate_button.grid(row=2, column=0, padx=5, pady=5)

reset_button = tk.Button(root, text="Reset", command=reset_fields)
reset_button.grid(row=2, column=1, padx=5, pady=5)

bmi_label = tk.Label(root, text="")
bmi_label.grid(row=3, column=0, columnspan=2, padx=5, pady=5)

quote_label = tk.Label(root, text="", fg="blue")
quote_label.grid(row=4, column=0, columnspan=2, padx=5, pady=5)

root.mainloop()
